// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled (runtime)
  directUrl = env("DIRECT_URL") // direct (migrations)
}

enum ListingStatus {
  DRAFT
  ACTIVE
  SOLD
  HIDDEN
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // back-relations
  sellerProfile SellerProfile?
  favorites     Favorite[]
  reviews       Review[]
}

model SellerProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName String
  bio         String?
  city        String?
  state       String?
  lat         Float?
  lng         Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  listings Listing[]
}

model Listing {
  id          String        @id @default(cuid())
  sellerId    String
  seller      SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  title       String
  description String
  priceCents  Int
  currency    String        @default("usd")
  status      ListingStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  photos    Photo[]
  favorites Favorite[]
  reviews   Review[]

  @@index([sellerId, status])
  @@index([status, createdAt])
}

model Photo {
  id        String   @id @default(cuid())
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  url       String
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  @@index([listingId, sortOrder])
}

model Favorite {
  userId    String
  listingId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, listingId])
}

model Review {
  id         String   @id @default(cuid())
  listingId  String
  reviewerId String
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reviewer   User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  rating     Int // 1â€“5
  comment    String?
  createdAt  DateTime @default(now())

  @@index([listingId])
  @@index([reviewerId])
}
